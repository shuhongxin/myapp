// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	echo.proto

It has these top-level messages:
	EchoRequest
	EchoReplay
	Autoreply
*/
package echo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message
type EchoRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The response message
type EchoReplay struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *EchoReplay) Reset()                    { *m = EchoReplay{} }
func (m *EchoReplay) String() string            { return proto.CompactTextString(m) }
func (*EchoReplay) ProtoMessage()               {}
func (*EchoReplay) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EchoReplay) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The time message
type Autoreply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Autoreply) Reset()                    { *m = Autoreply{} }
func (m *Autoreply) String() string            { return proto.CompactTextString(m) }
func (*Autoreply) ProtoMessage()               {}
func (*Autoreply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Autoreply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "helloworld.EchoRequest")
	proto.RegisterType((*EchoReplay)(nil), "helloworld.EchoReplay")
	proto.RegisterType((*Autoreply)(nil), "helloworld.Autoreply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Echo service

type EchoClient interface {
	// Sends a message
	Send(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReplay, error)
	Push(ctx context.Context, in *Autoreply, opts ...grpc.CallOption) (Echo_PushClient, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Send(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReplay, error) {
	out := new(EchoReplay)
	err := grpc.Invoke(ctx, "/helloworld.Echo/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Push(ctx context.Context, in *Autoreply, opts ...grpc.CallOption) (Echo_PushClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Echo_serviceDesc.Streams[0], c.cc, "/helloworld.Echo/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoPushClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echo_PushClient interface {
	Recv() (*Autoreply, error)
	grpc.ClientStream
}

type echoPushClient struct {
	grpc.ClientStream
}

func (x *echoPushClient) Recv() (*Autoreply, error) {
	m := new(Autoreply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Echo service

type EchoServer interface {
	// Sends a message
	Send(context.Context, *EchoRequest) (*EchoReplay, error)
	Push(*Autoreply, Echo_PushServer) error
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Echo/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Send(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Autoreply)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServer).Push(m, &echoPushServer{stream})
}

type Echo_PushServer interface {
	Send(*Autoreply) error
	grpc.ServerStream
}

type echoPushServer struct {
	grpc.ServerStream
}

func (x *echoPushServer) Send(m *Autoreply) error {
	return x.ServerStream.SendMsg(m)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Echo_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _Echo_Push_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "echo.proto",
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4d, 0xce, 0xc8,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0x48, 0xcd, 0xc9, 0xc9, 0x2f, 0xcf, 0x2f,
	0xca, 0x49, 0x51, 0x52, 0xe7, 0xe2, 0x76, 0x4d, 0xce, 0xc8, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0x92, 0xe0, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0xd4, 0xb8, 0xb8, 0x20, 0x0a, 0x0b, 0x72, 0x12, 0x2b, 0xf1,
	0xa8, 0x53, 0xe5, 0xe2, 0x74, 0x2c, 0x2d, 0xc9, 0x2f, 0x4a, 0x2d, 0xc8, 0xc1, 0xa3, 0xcc, 0xa8,
	0x9a, 0x8b, 0x05, 0x64, 0x9c, 0x90, 0x25, 0x17, 0x4b, 0x70, 0x6a, 0x5e, 0x8a, 0x90, 0xb8, 0x1e,
	0xc2, 0x51, 0x7a, 0x48, 0x2e, 0x92, 0x12, 0xc3, 0x94, 0x00, 0xb9, 0x40, 0x89, 0x41, 0xc8, 0x82,
	0x8b, 0x25, 0xa0, 0xb4, 0x38, 0x43, 0x48, 0x14, 0x59, 0x05, 0xdc, 0x6e, 0x29, 0xec, 0xc2, 0x4a,
	0x0c, 0x06, 0x8c, 0x49, 0x6c, 0xe0, 0x70, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xf6,
	0xb7, 0xd2, 0x15, 0x01, 0x00, 0x00,
}
